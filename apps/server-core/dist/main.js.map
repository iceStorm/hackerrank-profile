{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///external commonjs \"@nestjs/swagger\"","webpack:///external commonjs \"@ts-rest/open-api\"","webpack:///external commonjs \"zod\"","webpack:///../../libs/shared/src/models/Cert.ts","webpack:///../../libs/shared/src/models/Profile.ts","webpack:///../../libs/shared/src/models/LoginResponse.ts","webpack:///../../libs/shared/src/models/DownloadCertQuery.ts","webpack:///../../libs/shared/src/models/index.ts","webpack:///external commonjs \"@ts-rest/core\"","webpack:///../../libs/contracts/app/src/c.ts","webpack:///../../libs/contracts/app/src/certificates.contract.ts","webpack:///../../libs/contracts/app/src/profile.contract.ts","webpack:///../../libs/contracts/app/src/index.ts","webpack:///../../libs/contracts/index.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@ts-rest/nest\"","webpack:///external commonjs \"axios\"","webpack:///../../libs/hackerrank-api/src/httpClient.ts","webpack:///../../libs/hackerrank-api/src/index.ts","webpack:///external node-commonjs \"path\"","webpack:///external commonjs \"jimp\"","webpack:///external commonjs \"date-fns\"","webpack:///external commonjs \"jsdom\"","webpack:///external commonjs \"tough-cookie\"","webpack:///external commonjs \"axios-cookiejar-support\"","webpack:///./src/services/hackerrank.service.ts","webpack:///./src/modules/profile/profile.controller.ts","webpack:///./src/modules/profile/profile.service.ts","webpack:///./src/modules/profile/profile.module.ts","webpack:///external commonjs \"express\"","webpack:///external commonjs \"adm-zip\"","webpack:///./src/modules/certificate/certificate.service.ts","webpack:///./src/modules/certificate/certificate.controller.ts","webpack:///./src/modules/certificate/certificate.module.ts","webpack:///./src/app/app.service.ts","webpack:///./src/app/app.controller.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@nestjs/common\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@nestjs/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@nestjs/swagger\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ts-rest/open-api\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"zod\");","import { z } from \"zod\"\n\nexport const linksSchema = z.object({\n  self: z.string(),\n})\n\nexport const certificateSchema = z.object({\n  track_slug: z.string(),\n  label: z.string(),\n  level: z.union([z.literal(\"Basic\"), z.literal(\"Intermediate\"), z.literal(\"Advanced\")]),\n  skill_unique_id: z.string(),\n  description: z.string(),\n})\n\nexport const attributesSchema = z.object({\n  status: z.union([\n    z.literal(\"started\"),\n    z.literal(\"test_passed\"),\n    z.literal(\"test_failed\"),\n    z.literal(\"retake_available\"),\n  ]),\n  username: z.string(),\n  unlock_date: z.string().optional(),\n  waived_off: z.unknown(),\n  certificate: certificateSchema,\n  certificates: z.array(z.string()),\n  certificate_image: z.string().optional(),\n  hacker_name: z.string(),\n  test_unique_id: z.string(),\n  kind: z.string(),\n  hacker_name_updated_at: z.unknown(),\n  seen_by_user: z.unknown(),\n  completed_at: z.string(),\n  score: z.number(),\n  alloted_at: z.string().optional(),\n  type: z.union([z.literal(\"skill\"), z.literal(\"role\")]),\n})\n\nexport const certSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  links: linksSchema,\n  attributes: attributesSchema,\n})\n\nexport type Cert = z.infer<typeof certSchema>\n","import { z } from \"zod\"\n\nexport const profileSchema = z.object({\n  id: z.number(),\n  username: z.string(),\n  country: z.string(),\n  school: z.string(),\n  languages: z.array(z.unknown()),\n  created_at: z.string(),\n  level: z.number(),\n  deleted: z.boolean(),\n  is_admin: z.boolean(),\n  support_admin: z.boolean(),\n  avatar: z.string(),\n  website: z.string(),\n  short_bio: z.string(),\n  username_change_count: z.string(),\n  name: z.string(),\n  personal_first_name: z.string(),\n  personal_last_name: z.string(),\n  company: z.string(),\n  local_language: z.string(),\n  has_avatar_url: z.boolean(),\n  hide_account_checklist: z.string(),\n  spam_user: z.string(),\n  job_title: z.string(),\n  jobs_headline: z.string(),\n  linkedin_url: z.string(),\n  github_url: z.string(),\n  self: z.boolean(),\n  title: z.string(),\n  event_count: z.number(),\n  online: z.boolean(),\n  is_following: z.boolean(),\n  is_followed: z.boolean(),\n  followers_count: z.number(),\n})\n\nexport const profileResponseSchema = z.object({\n  model: profileSchema,\n})\n\nexport type Profile = z.infer<typeof profileSchema>\nexport type ProfileResponse = z.infer<typeof profileResponseSchema>\n","import { z } from \"zod\"\nimport { certSchema } from \"./Cert\"\n\nexport const loginBodySchema = z.object({\n  login: z.string().min(1),\n  password: z.string().min(1),\n})\n\nexport const loginAdditionalResponseSchema = z.object({\n  username: z.string(),\n  passedCertNames: z.string().array(),\n  failedCertNames: z.string().array(),\n  certs: certSchema.array(),\n})\n\nexport const loginResponseSchema = z\n  .object({\n    status: z.boolean(),\n    messages: z.array(z.string()),\n    errors: z.array(z.unknown()),\n    account_created: z.boolean(),\n    contest_signup: z.boolean(),\n    hrx_user: z.boolean(),\n    hacker_exists: z.boolean(),\n    contest_started: z.boolean(),\n    additional_details: z.boolean(),\n    domain_restriction: z.boolean(),\n    has_codesprint_reg_page: z.boolean(),\n    ask_jobs_profile: z.boolean(),\n    contest_slug: z.string(),\n    csrf_token: z.string(),\n  })\n  .merge(loginAdditionalResponseSchema)\n\nexport type LoginBody = z.infer<typeof loginBodySchema>\n\nexport type LoginResoonse = z.infer<typeof loginResponseSchema>\n","import { z } from \"zod\"\n\nexport const downloadCertQuery = z.object({\n  certificate_id: z.optional(z.string()),\n  quality: z.number({ coerce: true }).min(0).max(100).default(10),\n})\n","export * from \"./Cert\"\nexport * from \"./Profile\"\nexport * from \"./LoginResponse\"\nexport * from \"./DownloadCertQuery\"\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ts-rest/core\");","import { initContract } from \"@ts-rest/core\";\n\nexport const appContract = initContract()\n","import { z } from \"zod\"\n\nimport { certSchema, downloadCertQuery } from \"@hackerrank-profile/shared/models\"\n\nimport { appContract } from \"./c\"\n\nconst userCertificatesRouter = appContract.router({\n  getSingleCertificate: {\n    method: \"GET\",\n    path: `/certificates/:certificate_id`,\n    responses: {\n      200: certSchema,\n      404: z.string(),\n    },\n    summary: \"Get a certificate object by certificate id.\",\n  },\n\n  getUserAllCertificates: {\n    method: \"GET\",\n    path: \"/:username/certificates\",\n    responses: {\n      200: z.array(certSchema),\n    },\n    summary: \"Get list certificates of a user.\",\n  },\n\n  getUserSingleCertificate: {\n    method: \"GET\",\n    path: `/:username/certificates/:certificate_id`,\n    responses: {\n      200: certSchema,\n    },\n    summary: \"Get a certificate object of a user by certificate id.\",\n  },\n\n  downloadUserCertificates: {\n    method: \"GET\",\n    path: \"/:username/certificates/download\",\n    summary: \"Download a single certificate (jpg) or all certificates (zip).\",\n    description: \"Ignore the certificate_id to download all certificates.\",\n    responses: {\n      200: z.unknown(),\n      404: z.string(),\n    },\n    query: downloadCertQuery,\n  },\n})\n\nexport const certificatesRouter = userCertificatesRouter\n","import { loginBodySchema, loginResponseSchema, profileResponseSchema } from \"@hackerrank-profile/shared/models\"\n\nimport { appContract } from \"./c\"\n\nexport const profileRouter = appContract.router({\n  login: {\n    method: \"POST\",\n    path: \"/login\",\n    body: loginBodySchema,\n    summary: \"Login into HackerRank using a pair of credentials\",\n    responses: {\n      200: loginResponseSchema,\n    },\n  },\n\n  getProfile: {\n    method: \"GET\",\n    path: \"/:username\",\n    responses: {\n      200: profileResponseSchema,\n    },\n    summary: \"Get profile information of a user by using username\",\n  },\n})\n","import { certificatesRouter } from \"./certificates.contract\"\nimport { profileRouter } from \"./profile.contract\"\nimport { appContract } from \"./c\"\n\nexport const appRouter = appContract.router({\n  profile: profileRouter,\n  certificates: certificatesRouter,\n})\n","export * from \"./app/src/certificates.contract\"\nexport * from \"./app/src/profile.contract\"\nexport * from \"./app/src/c\"\nexport * from \"./app/src/index\"\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ts-rest/nest\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"axios\");","import axios, { CreateAxiosDefaults } from \"axios\"\n\nexport function getHttpClient(config?: CreateAxiosDefaults) {\n  return axios.create({\n    ...config,\n    headers: {\n      \"User-Agent\":\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36\",\n    },\n  })\n}\n","import { Cert, Profile } from \"@hackerrank-profile/shared/models\"\n\nimport { getHttpClient } from \"./httpClient\"\n\nconst httpClient = getHttpClient()\n\nexport async function getCerts(username: string) {\n  const response = await httpClient.get<{ data: Cert[] }>(\n    `https://www.hackerrank.com/community/v1/test_results/hacker_certificate?username=${username}`,\n  )\n\n  return response.data.data\n}\n\nexport async function getCertById(certId: string) {\n  const response = await httpClient.get<{ data: Cert }>(\n    `https://www.hackerrank.com/community/v1/test_results/${certId}`,\n  )\n\n  return response.data.data\n}\n\nexport async function getProfile(username: string) {\n  const { data } = await httpClient.get<{ model: Profile }>(\n    `https://www.hackerrank.com/rest/contests/master/hackers/${username}/profile`,\n  )\n\n  return data\n}\n\nexport async function getCertImage(certImageUrl: string) {\n  const { data: imageBuffer } = await httpClient.get<ArrayBuffer>(certImageUrl, {\n    responseType: \"arraybuffer\",\n  })\n\n  return Buffer.from(imageBuffer)\n}\n\nexport function getCertBackgroundName(cert: Cert) {\n  const certName = cert.attributes.certificates[0].split(/\\(Basic|\\(Intermediate|\\(Advanced/)[0].split(\"()\")[0]\n\n  const words = certName.split(\" \").filter(Boolean)\n  const transformedWords = new Array<string>()\n\n  for (let index = 0; index < words.length; index++) {\n    const word = words[index]\n\n    switch (word) {\n      case \"C#\":\n        transformedWords.push(\"C%23\")\n        break\n\n      case \"Node\":\n      case \"Node.js\":\n        transformedWords.push(\"Nodejs\")\n        break\n\n      case \"Rest\":\n        transformedWords.push(\"Rest_\")\n        break\n\n      case \"(React)\":\n        transformedWords.push(\"React\")\n        break\n\n      case \"Engineer\":\n        transformedWords.push(words[index + 1] === \"Intern\" ? \"Engineering\" : word)\n        break\n\n      default:\n        transformedWords.push(word)\n    }\n  }\n\n  return transformedWords.join(\"\")\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jimp\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"date-fns\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsdom\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tough-cookie\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"axios-cookiejar-support\");","import { resolve } from \"path\"\n\nimport Jimp from \"jimp\"\nimport { format } from \"date-fns\"\nimport { AxiosInstance } from \"axios\"\n\nimport { JSDOM } from \"jsdom\"\nimport { CookieJar } from \"tough-cookie\"\nimport { wrapper } from \"axios-cookiejar-support\"\n\nimport { Cert, LoginResoonse } from \"@hackerrank-profile/shared/models\"\nimport { getHttpClient } from \"@hackerrank-profile/hackerrank-api/httpClient\"\n\nexport async function generateCertificateImage(cert: Cert, quality: number, outputType: \"buffer\"): Promise<Buffer>\nexport async function generateCertificateImage(cert: Cert, quality: number, outputType: \"base64\"): Promise<string>\nexport async function generateCertificateImage(cert: Cert, quality: number, outputType: \"buffer\" | \"base64\") {\n  if (quality < 0 || quality > 100) {\n    throw new Error(\"Quality must not below 0 or higher 100\")\n  }\n\n  const image = await Jimp.read(resolve(__dirname, \"./assets/hackerrank-certificate-template.jpeg\"))\n\n  const width = image.getWidth()\n  const height = image.getHeight()\n\n  // draw cert id\n  const font24 = await Jimp.loadFont(resolve(__dirname, \"./assets/fonts/24/Xg7G3MkFJNkPqw2ZAxj9kpQR.ttf.fnt\"))\n  const certId = cert.id.toUpperCase()\n  const certIdWidth = Jimp.measureText(font24, certId)\n  image.print(font24, width - certIdWidth - 190, 130, certId)\n\n  // draw cert author\n  const font72 = await Jimp.loadFont(resolve(__dirname, \"./assets/fonts/72/o9OVcyamnJWarYlhYa1XZrQA.ttf.fnt\"))\n  const certAuthor = cert.attributes.hacker_name\n  const certAuthorWidth = Jimp.measureText(font72, certAuthor)\n  const certAuthorHeight = Jimp.measureTextHeight(font72, certAuthor, certAuthorWidth)\n  image.print(font72, (width - certAuthorWidth) / 2, height / 2 - (certAuthorHeight - 10), certAuthor)\n\n  // draw cert name\n  const font36 = await Jimp.loadFont(resolve(__dirname, \"./assets/fonts/36/LLPUZQ3YlfSY8mSDNPgkr2b6.ttf.fnt\"))\n  const certName = cert.attributes.certificates[0].split(\" ()\")[0]\n  const certNameWidth = Jimp.measureText(font36, certName)\n  image.print(font36, (width - certNameWidth) / 2, height / 2 + 100, certName)\n\n  // draw cert received date\n  const font32 = await Jimp.loadFont(resolve(__dirname, \"./assets/fonts/32/gtFiT41B72GlabIz8JNnyH5R.ttf.fnt\"))\n  const certDate = format(new Date(cert.attributes.completed_at), \"dd MMM yyyy\")\n  const certDateWidth = Jimp.measureText(font32, certDate)\n  const certDateHeight = Jimp.measureTextHeight(font32, certDate, certDateWidth)\n  image.print(font32, 592 - certDateWidth, height - certDateHeight - 225, certDate)\n\n  const compressedImage = image.quality(quality)\n\n  if (outputType === \"buffer\") {\n    return compressedImage.getBufferAsync(Jimp.MIME_JPEG)\n  }\n\n  return compressedImage.getBase64Async(Jimp.MIME_JPEG)\n}\n\nasync function getInitialCsrfToken(axiosClient: AxiosInstance) {\n  const { data } = await axiosClient.get(\"https://hackerrank.com/dashboard\")\n\n  const page = new JSDOM(data)\n  const metaTag = page.window.document.querySelector('meta[id=\"csrf-token\"]')\n\n  return metaTag?.getAttribute(\"content\")\n}\n\nexport async function login(usernameOrEmail: string, password: string) {\n  const jar = new CookieJar()\n  const client = wrapper(getHttpClient({ jar }))\n\n  // to get hackerrank hidden tokens and session id\n  const initialCsrfToken = await getInitialCsrfToken(client)\n\n  const loginResponse = await client.post<LoginResoonse>(\n    \"https://www.hackerrank.com/rest/auth/login\",\n    { login: usernameOrEmail, password },\n    {\n      headers: { \"X-Csrf-Token\": initialCsrfToken },\n    },\n  )\n\n  let username: string | undefined\n\n  // only fetch profile when logged in successfully\n  if (loginResponse.data.status === true) {\n    const { data: profileData } = await client.get(\"https://www.hackerrank.com/prefetch_data\")\n    username = profileData.profile.username\n    console.log(\"username:\", username)\n  }\n\n  // if login failed, get certs by username\n  const certsResponse = await client.get<{ data: Cert[] }>(\n    `https://www.hackerrank.com/community/v1/test_results/hacker_certificate?username=${username ?? login}`,\n  )\n\n  const passedCertNames = certsResponse.data.data\n    .filter(cert => cert.attributes.status === \"test_passed\")\n    .map(cert => cert.attributes.certificates[0])\n\n  const failedCertNames = certsResponse.data.data\n    .filter(cert => cert.attributes.status === \"test_failed\")\n    .map(cert => cert.attributes.certificates[0])\n\n  const responseObject = Object.assign(loginResponse.data, {\n    username,\n    passedCertNames,\n    failedCertNames,\n    certs: certsResponse.data.data,\n  })\n\n  return responseObject\n}\n","import { Controller } from \"@nestjs/common\"\n\nimport { TsRestHandler, tsRestHandler } from \"@ts-rest/nest\"\n\nimport { appRouter } from \"@hackerrank-profile/contracts\"\nimport { getProfile } from \"@hackerrank-profile/hackerrank-api\"\n\nimport { login } from \"../../services/hackerrank.service\"\n\n@Controller()\nexport class ProfileController {\n  @TsRestHandler(appRouter.profile)\n  async handler() {\n    return tsRestHandler(appRouter.profile, {\n      login: async ({ body }) => {\n        return { status: 200, body: await login(body.login, body.password) }\n      },\n\n      getProfile: async ({ params: { username } }) => {\n        const profile = await getProfile(username)\n\n        return { status: 200, body: profile }\n      },\n    })\n  }\n}\n","import { Injectable } from \"@nestjs/common\"\n\n@Injectable()\nexport class ProfileService {}\n","import { Module } from \"@nestjs/common\"\n\nimport { ProfileController } from \"./profile.controller\"\nimport { ProfileService } from \"./profile.service\"\n\n@Module({\n  controllers: [ProfileController],\n  providers: [ProfileService],\n})\nexport class ProfileModule {}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"adm-zip\");","import { HttpStatus, Injectable } from \"@nestjs/common\"\nimport { TsRestException } from \"@ts-rest/nest\"\n\nimport { Response } from \"express\"\nimport { format } from \"date-fns\"\nimport AdmZip from \"adm-zip\"\nimport Jimp from \"jimp\"\n\nimport { getCertById, getCerts } from \"@hackerrank-profile/hackerrank-api\"\n\nimport { certificatesRouter } from \"@hackerrank-profile/contracts\"\n\nimport { generateCertificateImage } from \"../../services/hackerrank.service\"\nimport { AxiosError } from \"axios\"\n\n@Injectable()\nexport class CertificateService {\n  async getSingleCertificate(certId: string) {\n    try {\n      const foundCert = await getCertById(certId)\n      return foundCert\n    } catch (error: any) {\n      console.log(error)\n\n      if (error instanceof AxiosError) {\n        throw new TsRestException(certificatesRouter.getSingleCertificate, {\n          status: error.response?.status as never,\n          body:\n            error.response?.status === HttpStatus.NOT_FOUND ? `No certificate with id ${certId} found` : error.message,\n        })\n      }\n\n      throw new TsRestException(certificatesRouter.getSingleCertificate, {\n        status: error.status ?? HttpStatus.INTERNAL_SERVER_ERROR,\n        body: error.message,\n      })\n    }\n  }\n\n  async getUserSingleCertificate(username: string, certId: string) {\n    const userAllCerts = await getCerts(username)\n\n    const theCert = userAllCerts.find(cert => cert.id === certId)\n\n    if (!theCert) {\n      throw new TsRestException(certificatesRouter.downloadUserCertificates, {\n        status: HttpStatus.NOT_FOUND,\n        body: `No certificate with id ${certId} available for user ${username}`,\n      })\n    }\n\n    return theCert\n  }\n\n  async generateAndDownloadCertificates(username: string, res: Response, quality: number, certId?: string) {\n    const allCerts = await getCerts(username)\n    const passedCerts = allCerts.filter(cert => cert.attributes.status === \"test_passed\")\n\n    // no certificates available\n    if (!passedCerts.length) {\n      return res.json({\n        username,\n        message:\n          \"There is no data to download. You have typed the wrong HackerRank username, or your account does not contain any certificates.\",\n        profile: `https://www.hackerrank.com/profile/${username}`,\n      })\n    }\n\n    // handle single cert downloading\n    if (certId) {\n      const foundCert = passedCerts.find(cert => cert.id === certId)\n\n      if (!foundCert) {\n        throw new TsRestException(certificatesRouter.downloadUserCertificates, {\n          status: HttpStatus.NOT_FOUND,\n          body: `No certificate with id ${certId} available for user ${username}`,\n        })\n      }\n\n      res.header({\n        \"Content-Type\": Jimp.MIME_JPEG,\n        \"Content-Disposition\": `attachment; filename=\"${username}_hackerrank_certificate__${foundCert.attributes.certificates[0].replace(\n          \" ()\",\n          \"\",\n        )}.jpg\"`,\n      })\n\n      return res.end(await generateCertificateImage(foundCert, quality, \"buffer\"))\n    }\n\n    const zipper = new AdmZip()\n\n    // map all certificates image to buffer array\n    await Promise.all(\n      passedCerts.map(cert =>\n        generateCertificateImage(cert, quality, \"buffer\").then(imageBuffer => {\n          zipper.addFile(`${cert.id}__${cert.attributes.certificates[0].replace(\" ()\", \"\")}.jpg`, imageBuffer)\n        }),\n      ),\n    )\n\n    res.header({\n      \"Content-Type\": \"application/zip\",\n      \"Content-Disposition\": `attachment; filename=\"${username}_hackerrank_certificates__${format(\n        new Date(),\n        \"dd.MM.yyyy\",\n      )}.zip\"`,\n    })\n\n    res.end(zipper.toBuffer())\n  }\n}\n","import { Controller, Res } from \"@nestjs/common\"\n\nimport { TsRestHandler, tsRestHandler } from \"@ts-rest/nest\"\nimport { Response } from \"express\"\n\nimport { appRouter } from \"@hackerrank-profile/contracts\"\nimport { getCerts } from \"@hackerrank-profile/hackerrank-api\"\n\nimport { CertificateService } from \"./certificate.service\"\n\n@Controller()\nexport class CertificateController {\n  constructor(private certificateService: CertificateService) {}\n\n  // @TsRestHandler(appRouter.certificates)\n  // handler(@Req() req: Request, @Res({ passthrough: true }) res: Response) {\n  //   return tsRestHandler(appRouter.certificates, {\n  //     getAllCertificates: async ({ params: { username } }) => {\n  //       return { status: 200, body: await getCerts(username) }\n  //     },\n\n  //     downloadCertificates: async ({ params, query }) => {\n  //       const { username } = params\n  //       const { quality, certificate_id } = query\n\n  //       await this.certificateService.generateAndDownloadCertificates(username, res, quality, certificate_id)\n\n  //       return {\n  //         status: 200,\n  //         body: undefined,\n  //       }\n  //     },\n\n  //     getSingleCertificate: async ({ params: { username, certificate_id } }) => {\n  //       return {\n  //         status: 200,\n  //         body: await this.certificateService.getUserSingleCertificate(username, certificate_id),\n  //       }\n  //     },\n  //   })\n  // }\n\n  @TsRestHandler(appRouter.certificates.getSingleCertificate)\n  getSingleCertificates() {\n    return tsRestHandler(appRouter.certificates.getSingleCertificate, async ({ params: { certificate_id } }) => {\n      const certObject = await this.certificateService.getSingleCertificate(certificate_id)\n\n      return {\n        status: 200,\n        body: certObject,\n      }\n    })\n  }\n\n  @TsRestHandler(appRouter.certificates.getUserAllCertificates)\n  getAllCertificates() {\n    return tsRestHandler(appRouter.certificates.getUserAllCertificates, async ({ params: { username } }) => {\n      return { status: 200, body: await getCerts(username) }\n    })\n  }\n\n  @TsRestHandler(appRouter.certificates.downloadUserCertificates)\n  downloadCertificates(@Res({ passthrough: true }) res: Response) {\n    return tsRestHandler(appRouter.certificates.downloadUserCertificates, async ({ params, query }) => {\n      const { username } = params\n      const { quality, certificate_id } = query\n\n      await this.certificateService.generateAndDownloadCertificates(username, res, quality, certificate_id)\n\n      return {\n        status: 200,\n        body: undefined,\n      }\n    })\n  }\n\n  @TsRestHandler(appRouter.certificates.getUserSingleCertificate)\n  getUserSingleCertificates() {\n    return tsRestHandler(\n      appRouter.certificates.getUserSingleCertificate,\n\n      async ({ params: { username, certificate_id } }) => {\n        const certObject = await this.certificateService.getUserSingleCertificate(username, certificate_id)\n\n        return {\n          status: 200,\n          body: certObject,\n        }\n      },\n    )\n  }\n}\n","import { Module } from \"@nestjs/common\"\n\nimport { CertificateController } from \"./certificate.controller\"\nimport { CertificateService } from \"./certificate.service\"\n\n@Module({\n  controllers: [CertificateController],\n  providers: [CertificateService],\n})\nexport class CertificateModule {}\n","import { Injectable, NotFoundException } from \"@nestjs/common\"\n\nimport { Request, Response } from \"express\"\nimport { format } from \"date-fns\"\nimport AdmZip from \"adm-zip\"\nimport Jimp from \"jimp\"\n\nimport { getCerts } from \"@hackerrank-profile/hackerrank-api\"\n\nimport { generateCertificateImage } from \"../services/hackerrank.service\"\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: \"Hello API\" }\n  }\n\n  async getUserSingleCertificate(username: string, certId: string) {\n    const userAllCerts = await getCerts(username)\n\n    const theCert = userAllCerts.find(cert => cert.id === certId)\n\n    if (!theCert) {\n      throw new NotFoundException(``)\n    }\n\n    return theCert\n  }\n\n  async generateAndDownloadCertificates(username: string, req: Request, res: Response, certId?: string) {\n    const quality = parseInt((req.query[\"quality\"] as string) ?? \"10\", 10)\n\n    const allCerts = await getCerts(username)\n    const passedCerts = allCerts.filter(cert => cert.attributes.status === \"test_passed\")\n\n    // no certificates available\n    if (!passedCerts.length) {\n      return Response.json({\n        username,\n        message:\n          \"There is no data to download. You have typed the wrong HackerRank username, or your account does not contain any certificates.\",\n        profile: `https://www.hackerrank.com/profile/${username}`,\n      })\n    }\n\n    // handle single cert downloading\n    if (certId) {\n      const foundCert = passedCerts.find(cert => cert.id === certId)\n\n      if (!foundCert) {\n        throw new Error(`No certificate with id ${certId} available for user ${username}`)\n      }\n\n      res.header({\n        \"Content-Type\": Jimp.MIME_JPEG,\n        \"Content-Disposition\": `attachment; filename=\"${username}_hackerrank_certificate__${foundCert.attributes.certificates[0].replace(\n          \" ()\",\n          \"\",\n        )}.jpg\"`,\n      })\n\n      return res.end(await generateCertificateImage(foundCert, quality, \"buffer\"))\n    }\n\n    const zipper = new AdmZip()\n\n    // map all certificates image to buffer array\n    await Promise.all(\n      passedCerts.map(cert =>\n        generateCertificateImage(cert, quality, \"buffer\").then(imageBuffer => {\n          zipper.addFile(`${cert.id}__${cert.attributes.certificates[0].replace(\" ()\", \"\")}.jpg`, imageBuffer)\n        }),\n      ),\n    )\n\n    res.header({\n      \"Content-Type\": \"application/zip\",\n      \"Content-Disposition\": `attachment; filename=\"${username}_hackerrank_certificates__${format(\n        new Date(),\n        \"dd.MM.yyyy\",\n      )}.zip\"`,\n    })\n\n    res.end(zipper.toBuffer())\n  }\n}\n","import { Controller, Get } from \"@nestjs/common\"\n\nimport { AppService } from \"./app.service\"\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData()\n  }\n\n  // @TsRestHandler(appRouter.login)\n  // async login() {\n  //   return tsRestHandler(appRouter.login, async ({ body }) => {\n  //     return { status: 200 as const, body: await login(body.login, body.password) }\n  //   })\n  // }\n\n  // @TsRestHandler(appRouter.getProfile)\n  // async getProfile() {\n  //   return tsRestHandler(appRouter.getProfile, async ({ params: { username } }) => {\n  //     return { status: 200 as const, body: await getProfile(username) }\n  //   })\n  // }\n\n  // @TsRestHandler(appRouter.getAllCertificates)\n  // async getAllCertificates() {\n  //   return tsRestHandler(appRouter.getAllCertificates, async ({ params: { username } }) => {\n  //     return { status: 200 as const, body: await getCerts(username) }\n  //   })\n  // }\n\n  // @TsRestHandler(appRouter.downloadCertificates)\n  // async downloadCertificates(@Req() req: Request, @Res() res: Response) {\n  //   return tsRestHandler(appRouter.downloadCertificates, async ({ params: { username, certificate_id } }) => {\n  //     const certs = await this.appService.generateAndDownloadCertificates(username, req, res, certificate_id)\n\n  //     return {\n  //       status: 200 as const,\n  //       body: certs,\n  //     }\n  //   })\n  // }\n\n  // @TsRestHandler(appRouter.getSingleCertificate)\n  // async getSingleCertificate() {\n  //   return tsRestHandler(appRouter.getSingleCertificate, async ({ params: { username, certificate_id } }) => {\n  //     return { status: 200 as const, body: await this.appService.getUserSingleCertificate(username, certificate_id) }\n  //   })\n  // }\n}\n","import { Module } from \"@nestjs/common\"\n\nimport { ProfileModule } from \"../modules/profile/profile.module\"\nimport { CertificateModule } from \"../modules/certificate/certificate.module\"\n\nimport { AppController } from \"./app.controller\"\nimport { AppService } from \"./app.service\"\n\nexport const config = {\n  runtime: \"edge\",\n}\n\n@Module({\n  imports: [ProfileModule, CertificateModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from \"@nestjs/common\"\nimport { NestFactory } from \"@nestjs/core\"\nimport { SwaggerModule } from \"@nestjs/swagger\"\n\nimport { generateOpenApi } from \"@ts-rest/open-api\"\n\nimport { appRouter } from \"@hackerrank-profile/contracts\"\n\nimport { AppModule } from \"./app/app.module\"\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, { cors: true })\n\n  const document = generateOpenApi(\n    appRouter,\n    {\n      info: {\n        title: \"HackerRank API\",\n        version: \"1.0.0\",\n      },\n    },\n    {\n      setOperationId: true,\n      jsonQuery: true,\n    },\n  )\n\n  SwaggerModule.setup(\"api\", app, document)\n\n  const port = process.env.PORT ?? 3000\n  await app.listen(port)\n\n  Logger.log(`🚀 Application is running on: http://localhost:${port}`)\n}\n\nbootstrap()\n"],"names":[],"sourceRoot":""}